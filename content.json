{"meta":{"title":"小小苏的个人博客","subtitle":null,"description":null,"author":"Jessa Su","url":"https://sucj0301.github.io","root":"/"},"pages":[],"posts":[{"title":"Linux--vi和vim编辑器","slug":"Linux-vi和vim编辑器","date":"2019-08-21T11:36:52.000Z","updated":"2019-10-28T12:15:05.392Z","comments":true,"path":"2019/08/21/Linux-vi和vim编辑器/","link":"","permalink":"https://sucj0301.github.io/2019/08/21/Linux-vi和vim编辑器/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Linux(ubuntu16.04)","slug":"Linux-ubuntu16-04","date":"2019-08-17T00:55:26.000Z","updated":"2019-10-28T12:01:53.993Z","comments":true,"path":"2019/08/17/Linux-ubuntu16-04/","link":"","permalink":"https://sucj0301.github.io/2019/08/17/Linux-ubuntu16-04/","excerpt":"","text":"一、Linux简介&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Linux是一种自由和开放源码的操作系统，有很多不同的版本，比如RedHat、SuSE、Ubuntu、Fedora、GentOS等等，它可以安装在手机、平板电脑、路由器、台式计算机等各种计算机硬件设备中。 二、Linux特点 开源免费 安全稳定 多用户多任务 广泛的硬件支持 模块化程度高 良好的移植性 三、Linux的使用1.用户管理 在学习Linux命令之前要了解的东西： /etc/passwd和/etc/shadow(保存Linux用户名和密码的两个重要文件) 1)/etc/passwd内容格式说明(冒号隔开算一列) 例：root:x:0:0:root:/root:/bin/bash 列数 含义 说明 1 用户名 是UID字符串标记方式，方便阅读 2 密码 保存在/etc/shadow中，此处用x表示 3 UID 用户的数字ID 4 GID 用户组的数字ID 5 说明栏 类似于注释， 6 家目录 用户登录后所处的目录 7 登录Shell 用户登录后所使用的Shell 2)/etc/shadow内容格式说明 例：sucj:$6$FR/sXSFK$Bn0sk/DBW1F1ybfjIutSMWS4tMKwtHOP4NR/KCW833JonmuDhEVfTXAW7ylpRnAC0bi.qPj1XgoBCqTnOubbL/:18123:0:99999:7::: 列数 含义 说明 1 用户名 是UID字符串标记方式，方便阅读 2 密码 经过加密后的密码 3 密码的最近修改日期 从1970年1月1日到密码修改日的天数 5 密码不可修改的天数 修改密码之后，几天内不可修改，如果是0，则可以随时修改 6 密码重新修改的天数 密码修改时间，在密码到期之前会提醒用户修改密码 7 密码失效前提前警告的天数 设定密码到期前几天内提醒用户修改密码 8 账号失效日期 一般为空 9 保留字段 暂时没有使用 一些关键字和符号 关键字/符号 含义 root 超级管理员（至高无上的权限） ~$ 说明当前是root用户 ~# 说明当前是普通用户 1)创建新用户 命令 描述 adduser xxx 新建用户xxx 过程 新建组，组名与用户名保持一致/etc/group 保存了组信息 新建用户，并且将用户当道刚刚新建的组中/etc/passwd 保存了用户信息/etc/shadow 保存了用户的密码信息 创建了一个家目录 /home/xxx 拷贝到用户家目录 etc/skel 2)删除用户 命令 描述 userdel xxx 删除用户信息 userdel -r xxx 删除用户信息，并且将用户家目录和邮件信息 3)切换用户 命令 描述 su 切换到root用户，但用户环境是切换前的用户的环境 su - 切换到root用户，并且应用root的用户环境 su xxx 切换到普通用户xxx，但用户环境是root的用户环境 su - xxx 切换到普通用户xxx，并且用户环境是xxx的用户环境 exit 直接返回到上次使用的用户 4)修改密码 命令 描述 ~$ passwd xxx 修改用户xxx的密码(密码可以很简单且无需知道xxx当前密码) ~# passwd 修改自己的密码(普通用户也可以),需提供当前密码且新密码不能太简单 5)修改用户 可以先用命令cat /etc/passwd | grep xxx 查看用户xxx当前所在目录 命令 描述 使用方法 usermod -d 修改用户家目录 usermod -d /home/xxx-n -m xxx(-m参数的作用是如果指定的用户家目录不存在，就自动创建新目录xxx-n，并使用该目录作为xxx 的新家目录，如果没有这个参数则会报错) usermod -g 修改用户组ID usermod -g 1008 zhangsan(将zhangsan的组ID换成1008) usermod -L 冻结账号(账号出现异常时可使用) usermod -L xxx(被冻结的账号在第二列也就是密码最前面有个感叹号) 6)修改组信息 命令 描述 groupadd group1 创建一个组名为group1的组 groupdel group1 删除组group1 groupmod -n group2 group1 把组名group1改为group2 groupmod -g 333 group1 把组group1的数字ID改为333 7)检查用户信息 命令 描述 users 查看当前系统有哪些用户 who 查看当前系统的用户以及它们的登录终端、登录时间 w (比上两个命令更详细的信息，见下表) finger 显示系统登录用户的信息，后可跟某个用户名以显示该用户更详细的信息 其中w显示的信息： 列数 列名 说明 1 USER 登录用户的用户名 2 TTY 用户登录终端 3 FROM 如果用户从网络登录，则显示远程主机的主机名或IP地址 4 LOGIN@ 用户登录时间 5 IDLE 用户闲置时间 6 JCPU 与终端相关的当前所有运行进程消耗的CPU时间总量 7 PCPU 当前WHAT列所对应的进程所消耗的CPU时间总量 8 WHAT 用户当前运行的进程 2.Linux的目录结构 目录 目录的用途 /home 普通用户的家目录(默认情况下普通用户只能在用户家目录中进行更新操作) /root root用户的家目录 /etc 系统配置文件的目录 /opt 第三方软件解压安装的目录 /usr 存放与用户直接相关的文件和目录(文件的默认目录) /var 存放那些在时间、大小、内容上会经常变化的文件(比如日志文件) /sys 系统目录，用于存放系统信息 /dev 设备文件，包括硬盘和显示器 /bin 常见的用户指令 /boot 内核和启动文件 /lib 系统函数库目录 /lost+found ext3文件系统需要的目录，用于磁盘检查 /mnt 用于加载各种文件系统 /proc 虚拟文件系统 /sbin 存放系统管理命令 /tmp 临时文件的存放目录 /media 用来加载各种媒体等临时文件的挂载点 绝对路径和相对路径 绝对路径：从根目录开始的全路径，一定是以 / 开头(比如/usr/local/src) 当前目录：可使用命令pwd查看 特殊目录：(.)和(..) 一个点(.)代表当前目录 两个点(..)代表当前目录的上层目录 相对路径：相对于当前路径的路径。比如 cd . 表示进入当前目录 cd .. 表示进入当前目录的上层目录 3.文件系统1、新建目录 命令 描述 mkdir linux es5 es6 在当前目录下创建多个文件 mkdir -p day/a/b/c 在多个嵌套文件夹中创建文件 2、新建文件/修改最近访问时间 touch 文件名 ： 如果指定的文件名不在，创建该文件。如果存在，修改最近访问时间为当前时间 3、拷贝文件或者目录 命令 描述 cp a.txt /tmp/a-copy.txt 把文件a.txt复制到文件夹/tmp并命名为a-copy.txt cp a.txt /tmp/ 把文件复制到文件夹/tmp但保持原文件名不变 cp -r dir1 dir2 将dir1目录复制成dir2目录 4、链接 命令 描述 $ ln a.txt a.txt.h 创建硬链接(防止误删除，多个指针指向同一个inode) $ ln -s a.txt a.txt.s 创建软链接 (快捷方式) 5、移动和重命名 命令 描述 mv a.txt /mnt/ 移动文件a.txt到目录/mnt中 mv a.* dir1 将前缀为a的所有文件移动到文件夹dir1中 mv a.txt a.doc 将文件a.txt重命名为a.doc 6、删除文件 命令 描述 rm a.txt 删除a.txt文件 rm -r dir1 删除dir1文件夹 rmdir dir2 删除文件夹dir2，前提是dir2一定是空文件夹 7、重定向 命令 描述 date &gt; a.txt 将当前时间打印到a.txt中，如果a.txt中有内容则会被覆盖 date &gt;&gt; a.txt 将当前时间打印到a.txt中，如果a.txt中有内容则回追加在后面 more /etc/passwd &gt; b.txt 将/etc目录下的passwd中的内容打印到b.txt中 ls -l /etc &gt; c.txt 将/etc目录下的内容以长内容形式打印到c.txt中 8、压缩与解压 压缩形式 含义 压缩后的文件后缀名 解压方法 gzip a.txt 压缩文件a.txt .gz gunzip a.txt.gz bzip2 b.txt 压缩文件b.txt .bz2 bunzip2 b.txt.bz2 zip all.zip *.txt 打包压缩 .zip unzip all.zip 打包压缩zip后紧跟的是压缩后的包名(自己命名)，再后面是要压缩的文件，可以压缩多个文件和目录，用空格隔开列出即可。如果要压缩目录，记得在zip后加 -r 参数。 9、归档和拆档(tar) 归档： 参数 含义 -c 创建归档文件 -x 拆档 -v 打印细节 -f 指定归档/拆档文件 -j bzip2格式 (xxx.tar.bz2) -z gzip格式 (xxx.tar.gz) 使用方法 命令 描述 tar cvf all.tar *.txt 将后缀名为.txt的文件归档为all.tar,并打印细节 tar cvzf all.tar.gz *.txt 将后缀名为.txt的文件归档为all.tar,并且压缩格式为gzip，打印细节 tar cvjf all.tar.bz2 *.txt 将后缀名为.txt的文件归档为all.tar，并且压缩格式为bzip2，打印细节 拆档：tar xvf all.tar.gz 10、其它命令 命令 描述 clear 清理终端屏幕 ls /home 列出价目录的所有目录和文件 ls -l 列出每个文件的详细信息 ls -a 同时列出隐藏文件 ls -al 格式化地输出文件的详细信息 ls -lrt 按时间显示文件 man 查看指定命令的手册，q代表退出手册，回车代表下一行，空格代表下一页 more 预览(不支持后退，所以在不需要后退的情况下使用比较方便) less 预览(支持前后翻滚，可以向上翻页&lt;PgUp键&gt;,也可以向下翻页&lt;PgDn键&gt;) head -n file1 查看一个文件的前n行，不加-n默认查看前十行 tail -n file1 查看一个文件的后n行，不加-n默认查看后十行 cat 查看文件的内容（链接后显示） tac 把内容反过来显示(最后一行先显示，第一行最后显示) nl 给输出的文件内容添加行号后显示 cd 或 cd ~ 回到家目录 cd / 切换到根目录 cd .. 返回上一级目录 cd ../.. 返回上两级目录 cd - 返回上次所在目录 cd /home/zhangsan 切换到指定目录 pwd 输出当前目录地址 grep str /tmp 在tmp目录下查找”str” Linux的一些很可爱的快捷键： 快捷键 作用 Ctrl + u 删除光标前(含光标所在字符)到行首的字符(在输错命令但Backspace啥的都用不了的时候，真的绝了) Ctrl + k 删除光标后(含光标所在字符)到行尾的字符 Esc + Backspace 删除当前光标前全部命令，但是有的情况下用不了，不喜欢 Ctrl + C 终止前台运行的程序(取消当前输入的命令) Ctrl + D 退出，相当于exit(返回) Ctrl + a 光标移动到行首 Ctrl + e 光标移动到行尾 Ctrl + l 清屏,也可以是Ctrl + L Tab 补全命令(只能补全命令和文件)，在命令没输全时按两下会给出所有以此开头的命令 ！$ 引用上一个命令的最后一个参数 ！后面遇到再补充","categories":[],"tags":[]},{"title":"css3--布局","slug":"css3-布局","date":"2019-08-15T12:13:19.000Z","updated":"2019-11-06T12:39:41.174Z","comments":true,"path":"2019/08/15/css3-布局/","link":"","permalink":"https://sucj0301.github.io/2019/08/15/css3-布局/","excerpt":"","text":"一、浮动布局 float:left/right; 脱离文档流: 1）高度和宽度默认由内容决定 2）原先所在位置就会被其他块元素抢占 3）浮动元素在一行中依次排列，当一行无法容纳的时候会自动换行 应用： 全部浮动 （2列以上） 12345678910111213141516171819&lt;style&gt; ul::after&#123; display:block; content: &quot;&quot;; clear: both; &#125; ul &gt; li &#123; float: left; width: (自己设置); &#125;&lt;/style&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt; 左侧浮动，右侧不浮动（2列） 123456789101112131415&lt;style&gt; .content &gt; .left &#123; float: left; width: 220px; &#125; .content &gt; .right &#123; margin-left: 230px; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&quot;content&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 二、定位布局 1）作用：当一个元素悬挂在其他元素之上，优先考虑定位布局eg：模态框、下拉菜单、二级菜单、固定宣传栏、网页聊天页面 2）用法：position:static / relative / absolute / fixed / sticky ; static : 默认，静态布局，默认文档流中，非定位元素 relative ： 定位元素（相对定位） 1）没有脱离文档流 2）参照点为当前元素原本的位置 absolute ： 定位元素（绝对定位） 1）脱离了文档流 2）参照距离当前元素最近的父定位元素，如果所有的父元素都没有定位元素，则参照浏览器视口 fixed ： 定位元素（固定定位） 1）脱离了文档流2）参照浏览器视口 sticky ： 定位元素（粘滞定位） 1）不脱离文档流2）relative 和 fixed 的结合 例：top:50px; //当当前元素距离浏览器视口顶端为50px时，体现fixed的特点。 定位元素的特点： 1.可以使用描述当前元素位置的属性 top、right、bottom、left 2.z-index 指定一个元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。 1234567img &#123; position:absolute; left:0px; top:0px; z-index:-1; &#125; 3.参照点 4.是否脱离文档流 练习 相对定位 123456789101112131415161718192021222324252627282930313233&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;相对定位&lt;/title&gt; &lt;style&gt; .outer &#123; background-color: #ccc; &#125; .outer &gt; div &#123; height: 100px; &#125; .outer &gt; div.one &#123; background-color: lightblue; &#125; .outer &gt; div.two &#123; background-color: pink; position: relative; top: 50px; left: 50px; z-index: 1; &#125; .outer &gt; div.three &#123; background-color: teal; position: relative; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;one&quot;&gt;&lt;/div&gt; &lt;div class=&quot;two&quot;&gt;&lt;/div&gt; &lt;div class=&quot;three&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 绝对定位 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;绝对定位&lt;/title&gt; &lt;style&gt; body &#123; &#125; .outer &#123; background-color: #ccc; width: 800px; margin: 100px auto; position: relative; &#125; .outer &gt; div:nth-child(1), .outer &gt; div:nth-child(3) &#123; height: 100px; &#125; .outer &gt; div.one &#123; background-color: lightblue; &#125; .outer &gt; div.two &#123; background-color: pink; position: absolute; /*width: 100px;*/ top: 0; left: 0; right: 0; bottom: 0; opacity: .5; &#125; .outer &gt; div.three &#123; background-color: teal; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;one&quot;&gt;&lt;/div&gt; &lt;div class=&quot;two&quot;&gt;&lt;/div&gt; &lt;div class=&quot;three&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 固定定位 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;固定定位&lt;/title&gt; &lt;style&gt; p &#123; margin: 0; &#125; ul &#123; margin: 0; padding: 0; list-style: none; &#125; .container &#123; &#125; .aside &#123; position: sticky; float: right;; width: 100px; background-color: pink; top: 200px; &#125; .aside &gt; ul &gt; li &#123; height: 100px; line-height: 100px; border-bottom: 1px solid #fff; position: relative; &#125; .aside &gt; ul &gt; li:hover &gt; div &#123; display: block; &#125; .aside &gt; ul &gt; li &gt; div &#123; background-color: teal; width: 200px; position: absolute; top: 0; right: 120px; display: none; &#125; .wrapper &#123; width: 1200px; margin: 0 auto; &#125; a &#123; text-decoration: none; &#125; .top_nav a&#123; color: #333; font-weight: bold; &#125; .top_nav ul.nav &#123; background-color: teal; position: relative; &#125; .top_nav ul.nav::after &#123; display: block; content: &quot;&quot;; clear: both; &#125; .top_nav ul.nav &gt; li &#123; float: left; width: 100px; text-align: center; &#125; .top_nav ul.nav &gt; li:hover &gt; div &#123; display: block; &#125; .top_nav ul.nav &gt; li &gt; div &#123; position: absolute; left: 0; top: 100%; width: 100%; height: 200px; background-color: #fff; display: none; &#125; .left-aside &#123; position: fixed; left: 0; top: 200px; width: 100px; background-color: pink; &#125; .left-aside &gt; div &#123; height: 100px; line-height: 100px; border-bottom: 1px solid #fff; &#125; .left-aside &gt; div:hover &gt; div&#123; display: block; &#125; .left-aside &gt; div &gt; div&#123; position: absolute; top: 0; left: 100%; width: 300px; background-color: #ededed; display: none; height: 300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;top_nav&quot;&gt; &lt;div class=&quot;wrapper&quot;&gt; &lt;ul class=&quot;nav&quot;&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;居家生活&lt;/a&gt; &lt;div&gt; 居家生活子元素 &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;服饰鞋包&lt;/a&gt; &lt;div&gt; 服饰鞋包子元素 &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;美食酒水&lt;/a&gt; &lt;div&gt; 美食酒水子元素 &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=&quot;#&quot;&gt;运动旅行&lt;/a&gt; &lt;div&gt; 运动旅行子元素 &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;height: 300px;background-color: lightblue&quot;&gt; &lt;/div&gt; &lt;div class=&quot;left-aside&quot;&gt; &lt;div&gt; &lt;p&gt;全站&lt;/p&gt; &lt;div&gt; 全站... &lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;p&gt;居家&lt;/p&gt; &lt;div&gt; 居家.... &lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;p&gt;服饰&lt;/p&gt; &lt;div&gt; 服饰... &lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;p&gt;美食&lt;/p&gt; &lt;div&gt; 美食... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 右侧栏 --&gt; &lt;div class=&quot;aside&quot;&gt; &lt;ul&gt; &lt;li&gt;图片&lt;/li&gt; &lt;li&gt;二维码&lt;/li&gt; &lt;li&gt; &lt;p&gt;电子刊&lt;/p&gt; &lt;div&gt; 电子刊子内容 &lt;/div&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;客服&lt;/p&gt; &lt;div&gt; 客服子内容 &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;br&gt;*100 //做测试&lt;/body&gt; 粘滞定位 eg1: 123456789101112131415161718192021&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;粘滞布局&lt;/title&gt; &lt;style&gt; div:nth-child(3)&#123; background-color: pink; position: sticky; top: 20px; width: 200px; right: 0; float: right; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;height: 200px;background-color: #ededed&quot;&gt;&lt;/div&gt; &lt;div&gt;one&lt;/div&gt; &lt;div&gt;two&lt;/div&gt; &lt;div&gt;three&lt;/div&gt; &lt;div style=&quot;height: 2000px;background-color: #ccc&quot;&gt;&lt;/div&gt;&lt;/body&gt; eg2: 1234567891011121314151617181920212223&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;粘滞定位&lt;/title&gt; &lt;style&gt; body &#123; margin: 0; &#125; .box &#123; height: 100px; width: 100px; background-color: #ededed; position: sticky; top:50px; float: right; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=&quot;height: 300px;background-color: pink&quot;&gt;&lt;/div&gt; &lt;div class=&quot;box&quot;&gt;&lt;/div&gt; &lt;div style=&quot;height: 1000px;background-color: lightblue;&quot;&gt;&lt;/div&gt;&lt;/body&gt; 三、伸缩盒布局 作用：使得子元素在父元素中分列显示，与float的作用类似。一般用于响应式布局（手机app中） 用法 1）父元素在主轴上一定要有一个固定的宽/高 2）子元素在交叉轴上默认宽/高占满父元素 如果主轴为x轴，那么资源的默认高度占满父元素 如果主轴为y轴，那么资源的默认宽度占满父元素 3） 123456789101112 &lt;style&gt; ul &#123; display:flex;&#125; &lt;/style&gt; &lt;body&gt;&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; &lt;/body&gt; 说明： ul 伸缩盒 元素 描述 display:flex; 设置父元素为伸缩盒 flex-direction:row / column ; 主轴 (默认情况下为x轴 )；row 【左中右】/column【上中下】；交叉轴 默认情况下为y轴 ；元素沿着伸缩盒的主轴排列的 flex-wrap:wrap / nowrap ; 子元素宽度和大于父元素的时候是否换行； nowrap（默认值，不换行）； wrap（换行） li 伸缩盒的元素 元素 描述 flex-basis 基础值，主轴上元素的基础值(宽/高) flex-gorw 对盈余空间的分配 flex-shrink 对亏损空间的贡献 flex: grow shrink basis; 速写 eg1: 12345678910111213141516171819202122232425262728293031323334353637383940&lt;title&gt;伸缩盒布局&lt;/title&gt; &lt;style&gt; body &#123; margin: 0; &#125; .outer &#123; display: flex; flex-direction: row; flex-wrap: nowrap; background-color: #ededed; &#125; .outer &gt; div &#123; height: 100px; width: 300px; &#125; .outer &gt;div:nth-child(1)&#123; background-color: teal; /*flex-basis: 300px;*/ flex-grow: 1; flex-shrink: 2; &#125; .outer &gt;div:nth-child(2)&#123; background-color: pink; /*flex-basis: 300px;*/ flex-grow: 2; flex-shrink: 1; &#125; .outer &gt;div:nth-child(3)&#123; background-color: lightblue; /*flex-basis: 300px;*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; eg2: 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;title&gt;伸缩盒&lt;/title&gt; &lt;style&gt; body &#123; margin: 0; &#125; .outer &#123; background-color: #ededed; width: 1000px; height: 500px; margin: 0 auto; display: flex; flex-direction: row; flex-wrap: wrap; &#125; .outer &gt; div &#123; &#125; .outer &gt;div:nth-child(1)&#123; background-color: teal; flex-basis: 400px; flex-grow: 1; &#125; .outer &gt;div:nth-child(2)&#123; background-color: pink; flex-basis: 400px; flex-grow: 1; &#125; .outer &gt;div:nth-child(3)&#123; background-color: lightblue; flex-basis: 400px; flex-grow: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;","categories":[],"tags":[]},{"title":"css-动画","slug":"css3-动画","date":"2019-08-11T23:04:08.000Z","updated":"2019-11-06T11:24:08.975Z","comments":true,"path":"2019/08/12/css3-动画/","link":"","permalink":"https://sucj0301.github.io/2019/08/12/css3-动画/","excerpt":"","text":"一、动画定义 @keyframes(关键帧)规则:from和to分别代表动画的开始点和结束点（分别可以用0%和100%来表示) 12345678@keyframes 动画名称 &#123; from&#123; &#125; to&#123; &#125;&#125; 1234567891011@keyframes 动画名称 &#123; 25%&#123; &#125; 50%&#123; &#125; 100%&#123; &#125;&#125; 二、动画应用 1.指定关键帧的名称 animation-name: keyframename/none; 2.动画持续的时间（?s) animation-duration: time; 3.动画延迟时间 animation-delay: time; 4.动画运动方向 animation-direction: normal/reverse/alternate/alternate-reverse/initial/inherit; 值 描述 normal 默认值，动画按正常播放 reverse 动画反向播放 alternate 动画在奇数次（1、3、5…)正向播放，在偶数次（2、4、6…)反向播放 alternate-reverse 动画在奇数次（1、3、5…)反向播放，在偶数次（2、4、6…)正向播放 initial 设置该属性为它的默认值 inherit 从父元素集成该属性 5.动画结束后保留哪个样式 animation-fill-mode: none/forwards/backwards/both ; 值 描述 none 不改变默认值 forwards 保留最后一帧的样式 backwards 保留第一帧的样式 both 动画会在两个方向上扩展动画属性 6.动画播放的次数 animation-iteration-count: n/infinite; 值 描述 n 定义动画播放次数的数值 infinite 规定动画无限次数播放 7.动画执行的时间曲线 animation-timing-function: linear/steps(n)/ease/; linear: 动画从开始到结束的速度是相同的。（匀速） steps(n,start/end): (作用于两个关键帧之间，而非整个动画) 把动画分成n步阶段性展示，n必须为整数。 start和end可选。指定在每个间隔的起点还是终点发生阶跃变化。 start：第一帧是第一步动画结束 end ：第一帧是第一步动画开始 8.动画播放状态 animation-play-state: running/paused; 值 描述 running 动画播放 paused 动画暂停 9.速写 animation: duration timing-function delay iteration-count direction move_eye ; 示例（css3仿梦幻西游动画特效）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;css3模仿梦幻西游手游动画&lt;/title&gt; &lt;style&gt; .content&#123; position: absolute; width: 950px; /* background-color: pink; */ left: 50%; margin-left: -475px; bottom: 300px; &#125; .content &gt; ul&#123; padding: 0; margin: 0; list-style: none; &#125; .content &gt; ul::after&#123; display:block; content: &quot;&quot;; clear: both; &#125; .content &gt; ul &gt;li&#123; width:200px; height: 180px; margin-right: 50px; float: left; /* background-color: teal; */ overflow: hidden; /* 定义溢出元素内容区的内容会如何处理。visible：默认值，内容不会被剪切，会呈现在元素框之外 hidden：内容会被剪切，并且其余内容是不可见的；scrol：内容会被剪切，但是浏览器会显示滚动条以便查看其余内容 ；auto：如果内容会被剪切，则浏览器会显示滚动条以便查看其余的内容；inherit：规定应该从父元素集成overflow属性的值*/ &#125; .content &gt; ul&gt;li:last-child&#123; margin-right: 0; &#125; .content &gt; ul &gt; li&gt;div&#123; width: 1600px; height: 180px; font-size: 0; /*不加的话会有一个回车 */ /* 2.动画的引用 */ animation-name: dong; /*动画名称*/ animation-duration: 1s; /*动画持续时间（单位s一定要加）*/ /* animation-delay: 1s; 动画延迟（s） */ animation-iteration-count: infinite; /*动画执行次数。1）直接加数字表示次数；2）infinite：无限次*/ /* animation-direction: reverse; */ /*动画运动方向。reverse：动画效果从后往前运动，从from到to；alternate：往返运动*/ animation-timing-function:steps(8); /*时间曲线。linear：线性；steps(n):步数。一次跨n步*/ &#125; .content &gt; ul &gt; li&gt;div &gt; img&#123; width: 100%; &#125; /* 1.定义动画 */ @keyframes dong &#123; from &#123; margin-left: 0; &#125; to &#123; margin-left: -1600px; &#125; &#125; /*从一个状态到另一个状态 */ html,body,.main &#123; height:100%; &#125; .main &#123; width: 100%; overflow: hidden; &#125; .main &gt; .bg &#123; position: relative; width: 3920px; height: 100%; background-image: url(&apos;./image/mhxybj.jpg&apos;); background-repeat: repeat-x; animation-name: bg; animation-duration: 30s; animation-timing-function: linear; animation-iteration-count: infinite; &#125; @keyframes bg &#123; from&#123; left:-1920px; &#125; to&#123; left: 0; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;main&quot;&gt;&lt;div class=&quot;bg&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;content&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;div&gt;&lt;img src=&quot;./image/wk.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;div&gt;&lt;img src=&quot;./image/bj.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;div&gt;&lt;img src=&quot;./image/ts.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/li&gt; &lt;li&gt;&lt;div&gt;&lt;img src=&quot;./image/ss.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[]},{"title":"css3--规则","slug":"css3-规则","date":"2019-08-03T12:13:33.000Z","updated":"2019-11-06T11:14:33.089Z","comments":true,"path":"2019/08/03/css3-规则/","link":"","permalink":"https://sucj0301.github.io/2019/08/03/css3-规则/","excerpt":"","text":"1.字体样式（可以被继承）12345font-family:&quot;微软雅黑&quot;,&quot;Microsoft YaHei&quot;,&quot;宋体&quot;,serif;font-size:12px; 字体大小(浏览器默认字体为16px)font-weight:bold/normal/bolder/100~900; 字体粗细font-style:normal/italic; 是否开启斜体line-height:2em; 行高【文本垂直居中】 速写：font:style weight size/line-height family; 例如：italic bold 12px/2em ‘Microsoft YaHei’,serif 网络字体:主要用于字体图标库（iconfont/fontawesome） 使用步骤： 1) 在iconfont网站中选择图标，加入项目，产生代码 2) 将产生的代码在html中通过link引用 例：&lt;link rel=&quot;stylesheet&quot; href=&quot;http://at.alicdn.com/t/font_1328534_f3dyyeuoew.css&quot;&gt; 3) 应用css中定义好的类，来使用对应的图标 例：&lt;i class=&quot;iconfont icon-xxx&quot;&gt;&lt;/i&gt; 2.文本样式（可以被继承） 样式 描述 color:#333; 字体颜色 text-align:center/left/right; 文本位置(居中/偏左/偏右) text-decoration-line:属性值 文本修饰(详情见下表) text-decoration-style:属性值 规定线条如何显示(详情见下表) text-decoration-color:属性值 文本修饰（underline、overline、line-through）的颜色 text-decoration-line: none|underline|overline|line-through|initial|inherit; 属性值 描述 none 默认值。规定文本修饰没有线条。 underline 规定文本的下方将显示一条线。 overline 规定文本的上方将显示一条线。 line-through 规定文本的中间将显示一条线。 initial 设置该属性为它的默认值。 inherit 从父元素继承该属性。 text-decoration-style: solid|double|dotted|dashed|wavy|initial|inherit; 属性值 描述 solid 默认值。线条将显示为单线。 double 线条将显示为双线。 dotted 线条将显示为点状线。 dashed 线条将显示为虚线。 wavy 线条将显示为波浪线。 initial 设置该属性为它的默认值。 inherit 从父元素继承该属性。 text-decoration-color: color|initial|inherit; 属性值 描述 color 规定文本修饰的颜色。 initial 设置该属性为它的默认值。 inherit 从父元素继承该属性。 3.列表样式 样式 描述 list-style-type:none/disc/circle/square; 列表项标记的类型(无标记/默认，实心圆/空心圆/实心方块) list-style-image:url(“”); 将图像作为列表项标记 list-style-position:inside/outside; 在何处放置列表项标记 list-style:none; 所有的列表样式 4.盒子样式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475widthheightmargin-top 外边距（上）margin-right 外边距（右）margin-bottom 外边距（下）margin-left 外边距（左）margin margin:10px; 上右下左 margin:0 10px; 上下为0，左右10px margin:0 5px 10px; 上0，左右5px，下10px margin:0 5px 10px 15px; 上右下左 border-top-style 边框线类型border-top-width 边框宽度border-top-color 边框线颜色border-topborder-right-style 边框线类型border-right-width 边框宽度border-right-color 边框线颜色border-rightborder-bottom-style 边框线类型border-bottom-width 边框宽度border-bottom-color 边框线颜色border-bottomborder-left-style 边框线类型border-left-width 边框宽度border-left-color 边框线颜色border-leftborder-colorborder-styleborder-widthborder:1px solid #ededed; 【*】padding-toppadding-rightpadding-bottompadding-leftpaddingbox-shadow: 5px 5px 10px #ccc;box-shadow:inset 0 0 3px lightblue;border-radius 圆角半径background-origin 背景铺设的起点 border-box 边框下 padding-box 内边距下 content-box 内容下background-image 背景图片 urlbackground-repeat 背景重复方式 repeat-x repeat-y no-repeatbackground-color 背景颜色 颜色background-position 背景位置 center top left 10px 20pxbackground-clip 背景裁切方式 border-box 边框下 padding-box 内边距下 content-box 内容下background 速写background:url(&apos;&apos;) no-repeat center;background-size:cover;=&gt;background:center/cover padding-box url(&apos;&apos;) no-repeat ; 5、盒子的组成 外边距 margin 边框 border 内边距 padding 内容 content，存放子元素或者内容的区域 6.盒子的计算方式box-sizing:content-box;内容盒子（传统盒子） width = 内容宽 height = 内容高 所占的宽 = border + padding + width 所占的高 = border + padding + height box-sizing:border-box;边框盒子（怪异盒子） width = 边框以内所有的和 width = border + padding + 内容宽 7.单位(1)颜色 单位 描述 (颜色名) #333/red rgb(x,x,x) rgb(0,0,0) =&gt; #000000 rgba(x,x,x,0.x) 渐变，rgba(0,0,0,0.3) (2)尺寸（常用） 单位 描述 px 绝对单位，font-size=12px; em 相对单位，1em=12px; rem 相对单位，1rem = 14px; % 百分比(相对于父元素)","categories":[],"tags":[]},{"title":"css3-选择器","slug":"css3-选择器","date":"2019-07-30T11:05:34.000Z","updated":"2019-11-06T09:02:12.367Z","comments":true,"path":"2019/07/30/css3-选择器/","link":"","permalink":"https://sucj0301.github.io/2019/07/30/css3-选择器/","excerpt":"","text":"如何在html中应用css 1) 在元素中添加style属性，style属性值为css样式规则 缺点:样式与结构与杂糅 优点:简单直接，优先级高&lt;div style=&quot;width:100px;height:100px;&quot;&gt;&lt;/div&gt;2) 将样式添加到head标签中的style标签里&lt;style&gt; &lt;/style&gt;3) 将样式定义在css文件中，通过link导入进来 &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt; 一、css语法选择器 { 样式名:样式值; 样式名:样式值; … } 二、选择器1.核心选择器 选择器 表达式 举例 描述 标签选择器 el div 选择所有 div 元素 id选择器 #id #first 选择 id=”first” 的所有元素 class选择器 .class .head 选择所有 class=”head” 的元素 属性选择器 - - (另附表) 通配选择器 * * 即普遍选择器，选择所有元素 属性选择器 类型 举例 描述 [attribute] [target] 选择带有 target 属性所有元素 [attribute=value] [target=_blank] 选择 target=”_blank” 的所有元素 [attribute~=value] [title~=flower] 选择 title 属性包含单词 “flower” 的所有元素 [attribute^=”value”] [abc^=”def”] 选择 abc 属性值以 “def” 开头的所有元素 [attribute$=”value”] [abc$=”def”] 选择 abc 属性值以 “def” 结尾的所有元素 [attribute*=”value”] [abc*=”def”] 选择 abc 属性值中包含子串 “def” 的所有元素 2.层次选择器 选择器 表达式 举例 描述 子元素选择器 el &gt; el div&gt;p 选择 div 的第一子代的所有 p 元素 后代选择器 el el div p 选择 div 元素内部的所有 p 元素 相邻兄弟选择器 el + el div+p 选择与 div 同级且紧接在其后的第一个 p 元素 之后所有兄弟选择器 el ~ el div ~ p 选择与 div 同级且在其后的所有 p 元素 并集选择器 el,el div,p 选择所有 div 元素和所有 p 元素 交集选择器 elel p.first 选择 p 标签且class=”first”的元素 (选择器可以是标签名也可以是id或是class名，中间无连接符) 3.伪类选择器 选择器 举例 描述 :link a:link 选择所有未被访问的链接 :visited a:visited 选择所有已被访问的链接 :active a:active 选择正在被点击的活动链接 :hover a:hover 选择鼠标指针位于其上的链接 ：focus input:focus 用于选择具有焦点的元素(接受键盘事件或其他用户输入的元素),这里表示选择获得焦点的 input 元素 :checked input:checked 选择处于选中状态的radio(&lt;input type=&quot;radio&quot;&gt;), checkbox (&lt;input type=&quot;checkbox&quot;&gt;) 或(“select”) 元素中的option HTML元素(“option”) :selected :selected、.table:selected 可以单独使用，表示选取被选择的 option 元素；也可以配合其他选择器使用，这里表示class=”table”下的select的option选项 :first-child p:first-child 选择属于父元素的第一个子元素的每个 p 元素 :last-child p:last-child 选择属于其父元素最后一个子元素每个 p 元素 :nth-child(n) p:nth-child(2) 选择属于其父元素的第二个子元素的每个 p 元素 :first-of-type p:first-of-type 选择属于其父元素的首个 p元素的每个 p 元素 :last-of-type p:last-of-type 选择属于其父元素的最后 p 元素的每个 p 元素 :nth-of-type(n) p:nth-of-type(2) 选择属于其父元素第二个 p 元素的每个 p 元素 4.伪元素选择器 注：伪元素选择器不能匹配任何真实存在的html元素 ::before 创建一个伪元素，其将成为匹配选中的元素的第一个子元素。常通过 content 属性来为一个元素添加修饰性的内容。此元素默认为行内元素。 1234* Add a heart before links */a::before &#123; content: &quot;♥&quot;;&#125; ::after 用来创建一个伪元素，作为已选中元素的最后一个子元素。通常会配合content属性来为该元素添加装饰内容。这个虚拟元素默认是行内元素。 1234/* Add an arrow after links */a::after &#123; content: &quot;→&quot;;&#125; 常见用法：取消浮动(一般加在父元素上) 12345ul::after&#123; display:block; //设置为块元素 content:&quot;&quot;; //将内容设置为空值 clear:both; //清除周边元素&#125; 注：由::before 和::after 生成的伪元素 包含在元素格式框内，因此不能应用在替换元素上，比如 img 或 br 元素。 ::first-letter 选中某 block-level element（块级元素）第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格） 1234/* Selects the first letter of a &lt;p&gt; */p::first-letter &#123; font-size: 130%;&#125; ::first-line 在某 block-level element （块级元素）的第一行应用样式。第一行的长度取决于很多因素，包括元素宽度，文档宽度和文本的文字大小。 注：::first-line 伪元素只能在块容器中,所以,::first-line伪元素只能在一个display值为block, inline-block, table-cell 或者 table-caption中有用.。在其他的类型中，::first-line 是不起作用的. 例： 123//将每个段落中的第一行字母转换成大写p::first-line &#123; text-transform: uppercase &#125; ::selection 应用于文档中被用户高亮的部分（比如使用鼠标或其他选择设备选中的部分） 只有一小部分CSS属性可以用于::selection 选择器：12345678colorbackground-colorcursorcaret-coloroutline and its longhandstext-decoration and its associated propertiestext-emphasis-colortext-shadow 例：1234567891011/* 选中的文本是红色背景，金黄色的字体 */::selection &#123; color: gold; background-color: red;&#125; /*选中的是蓝色背景，白色的字体的段落*/p::selection &#123; color: white; background-color: blue;&#125; 三、选择器优先级 !important &gt; 内联样式(行内样式) &gt; ID选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器&gt; 标签(元素)选择器 = 伪元素选择器 &gt; 通配选择器 &gt; 继承 &gt; 浏览器默认属性 选择器 权重 ！important 1000 ID选择器 100 类选择器、伪类选择器、属性选择器 10 标签(元素)选择器、伪元素选择器 1 通配符选择器 0","categories":[],"tags":[]},{"title":"html5","slug":"html5","date":"2019-07-20T10:47:40.000Z","updated":"2019-11-06T06:55:53.916Z","comments":true,"path":"2019/07/20/html5/","link":"","permalink":"https://sucj0301.github.io/2019/07/20/html5/","excerpt":"","text":"一、网页元素1234&lt;p&gt;内容&lt;/p&gt; 段落标签&lt;a href=&quot;&quot;&gt;这是一个链接&lt;/a&gt; a标签，定义链接&lt;hr&gt; 换行..... 二、属性 在开始标签中可以添加属性 注：属性名不区分大小写 12&lt;div id=&quot;one&quot;&gt;&lt;/div&gt;&lt;div ID=&quot;one&quot;&gt;&lt;/div&gt; 核心属性（绝大多数标签都可以应用的属性 id 文档内部的唯一标识 class 类 123&lt;div class=&quot;first one&quot;&gt;one&lt;/div&gt;&lt;div class=&quot;first two&quot;&gt;two&lt;/div&gt;&lt;div class=&quot;first three&quot;&gt;three&lt;/div&gt; title 描述 style 样式，取值为css规则(键值对，键值之间通过冒号分割，规则之间通过分号分割) 1&lt;div id=&apos;one&apos; style=&quot;color:#333;backgroud:#ededed&quot;&gt;&lt;/div&gt; 特有属性 1- &lt;a href=&quot;链接地址&quot; target=&quot;链接打开的方式 &quot;&gt;点击链接&lt;/a&gt; target属性值 描述 _blank 在浏览器新窗口中打开被链接文档 _self 默认。在相反的框架中翻开被链接文档。阅读器从头载入彀页 _parent 在父框架斥逐打开被链接文档 _top 在整个窗口中掀开被链接文档 1- &lt;img src=&quot;图片的url&quot; alt=&quot;图片出错时显示的文本&quot; title=&quot;鼠标悬停时显示的文本&quot;&gt;&lt;/img&gt; h5拓展属性 (常用) data-xxx 存储页面自定义的数据例： 1&lt;div data-nn=&apos;one&apos;&gt;&lt;/div&gt; 三、结构1234567891011121314151617doctype 声明部分 htmlhead 不会显示到浏览器视口中 title 显示在浏览器选项卡 meta 用于设置元信息,配置 charset=utf-8 gbk big5 报社 环球新闻导报（php） utf-8 nihao 汉语拼音 hello 函数 编码 编辑器 UTF-8 解码 浏览器 body 网页主体 四、标签12345&lt;html&gt; 定义 HTML 文档&lt;body&gt; 定义文档的主体&lt;h1&gt; - &lt;h6&gt; 定义 HTML 标题&lt;hr&gt; 定义水平线&lt;!--...--&gt; 定义注释 五、元素1. 块元素（box） 作用：作为页面框架，或者容器。是页面的主体 特性： 1) 独占一行空间 2) 默认宽度为100%，默认高度由子元素或者内容决定 3) 可以为其指定宽高 style=”width:;height:;” 标签 描述 属性 html 定义HTML文档 margin body 定义文档的主体 margin div 无意义的块元素 h1~h6 定义HTML标题 font-size、font-weight、margin p 段落 margin hr 定义水平线 ul、li 无序列表，列表项 ul：margin、padding、list-style ol、li 有序列表，列表项 ol：margin、padding、list-style dl、dt、dd 有序列表 dl、dd：margin H5新增： 标签 描述 header 头 nav 定义导航链接 article 主体 section 部分 footer 脚 aside 侧边框 使用详情可查看此文章 2. 行内元素（label） 作用：点缀网页，填充内容 特性： 1) 与其他行内元素共享一行空间 2) 默认宽高由内容决定 3) 不能为其指定宽和高 4) 行内元素中不可以嵌套块元素，但块元素中可以嵌套行内元素 标签 描述 span 无意义的行内元素 a 超链接 img 引入图片 strong 语气更强的强调的内容 blod、b 字体加粗 em 定义为强调的内容 i 斜体文本效果 sub 定义下标文本 sup 定义上标文本 del 定义文档中已被删除的文本 … … 更多的可参考此文章 a标签：默认样式:color、text-decoration、cursor 默认事件:点击事件 123456普通的链接：&lt;a href=&quot;http://www.example.com/&quot;&gt;链接文本&lt;/a&gt;图像链接： &lt;a href=&quot;http://www.example.com/&quot;&gt;&lt;img src=&quot;URL&quot; alt=&quot;替换文本&quot;&gt;&lt;/a&gt;邮件链接： &lt;a href=&quot;mailto:webmaster@example.com&quot;&gt;发送e-mail&lt;/a&gt;书签：&lt;a id=&quot;tips&quot;&gt;提示部分&lt;/a&gt;&lt;a href=&quot;#tips&quot;&gt;跳到提示部分&lt;/a&gt; 3. 功能元素 （也是行内元素） 1) 表格 123456789101112131415table 【属性】border、width、、、、 caption 表格标题 thead 表头部分 tr th/td tbody 表格主体部分【不可以省略】 tr td/th 【属性】colspan、rowspan、width、align td/th中可以放任意子元素 tfoot 表底部分 tr td【注意】：每一行中的列数应该是相等 2) 表单（前后台交互） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;form action=&quot;&quot;&gt; input select textarea&lt;/form&gt;form action 后台接口地址 method 请求方式 get 参数拼接在url后面，通过?来分割 传递参数较少 查询学生信息、通过id删除学生信息、 post 参数存放在请求体中，安全 传递参数更多 保存或者更新学生信息、批量删除 enctype 编码方式 1. enctype=&apos;application/x-www-form-urlencoded&apos; 浏览器就会将参数转换为【查询字符串 qs】格式 username=charles&amp;password=123321&amp;nickname=李四&amp;emailcharles@briup.com 2. multipart/form-data 当有附件在表单中的时候，enctype务必设置为这种格式 ajax 查询字符串 username=charles&amp;password=123321&amp;nickname=李四&amp;emailcharles@briup.com JSON &apos;&#123;&quot;username&quot;:&quot;charles&quot;,&quot;password&quot;:&quot;123321&quot;&#125;&apos; &lt;input name=&quot;&quot; value=&quot;&quot; type=&quot;&quot; palceholder=&quot;&quot; checked&gt; name: 不能省略，作为参数中的key value: 作为参数中的value,在按钮中务必指定value值 type: text 单行文本框 password 密码框 submit 提交按钮 reset 重置 hidden 隐藏 file 附件选择器 radio 单选按钮 checkbox 复选按钮h5拓展(兼容性，功能) email date number ... progress checked: 单值属性 默认选址 placeholder 提示语 &lt;select name=&quot;&quot; id=&quot;&quot;&gt; &lt;option value=&quot;&quot;&gt;&lt;/option&gt; option 标签中的文本显示在网页中，提交的值应该是option的value值，当这个值没有设定的时候，提交的是标签中的文本 &lt;option value=&quot;sx&quot;&gt;山西&lt;/option&gt; &lt;option&gt;山西&lt;/option&gt; &lt;/select&gt; &lt;textarea name=&quot;&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot; placeholder=&quot;提示语&quot;&gt;&lt;/textarea&gt; 多行文本域第三方库 日期插件 地址选择器地址 附件上传 富文本 六、H5新特性 1、用于绘画的 canvas 元素 2、用于媒介回放的 video 和 audio 元素 3、对本地离线存储的更好的支持 4、新的特殊内容元素，比如 article、footer、header、nav、section 5、新的表单控件，比如 calendar、date、time、email、url、search","categories":[],"tags":[]}]}